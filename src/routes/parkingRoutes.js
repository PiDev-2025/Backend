const sendEmail = require("../utils/sendEmail");
const express = require("express");
const router = express.Router();
const ParkingRequest = require("../models/parkingRequestModel");
const Parking = require("../models/parkingModel");
const { verifyToken, verifyRole } = require("../middlewares/authMiddleware");
const upload = require("../middlewares/uploadMidd").upload;
const { validateParkingData } = require("../utils/validation");
const User = require("../models/userModel");
const { getParkingRequestEmailTemplate } = require("../utils/emailTemplates");
const axios = require('axios');
const {getUserFromToken} = require ("../middlewares/uploadMiddleware");


const {
  createParking,
  getParkings,
  getParkingById,
  updateParking,
  deleteParking,
  getParkingsByEmployee,
  updateTotalSpots,
  saveParking3D,
  updateParkingSpot
} = require("../services/parkingService");

router.use(express.json());
router.use(express.urlencoded({ extended: true }));

/**
 * ‚úÖ Met √† jour une demande de parking et la supprime apr√®s modification du statut
 */
router.put('/requests/:id', upload, async (req, res) => {
  try {
    const { status } = req.body;
    const requestId = req.params.id;

    if (!["accepted", "rejected"].includes(status)) {
      return res.status(400).json({ message: "Statut invalide" });
    }

    const parkingRequest = await ParkingRequest.findById(requestId).populate("Owner");
    if (!parkingRequest) return res.status(404).json({ message: "Demande introuvable" });

    // üìå Assurer que `position` existe
    if (!parkingRequest.position || !parkingRequest.position.lat || !parkingRequest.position.lng) {
      return res.status(400).json({ message: "Erreur : Position (lat, lng) manquante." });
    }

    // üìå Assurer que `pricing` est bien format√©
    if (!parkingRequest.pricing || typeof parkingRequest.pricing !== "object") {
      return res.status(400).json({ message: "Erreur : Informations de tarification manquantes." });
    }

    // üìå Assurer que `vehicleTypes` existe et est un tableau
    if (!Array.isArray(parkingRequest.vehicleTypes) || parkingRequest.vehicleTypes.length === 0) {
      return res.status(400).json({ message: "Erreur : Types de v√©hicules manquants." });
    }

    // üìå V√©rifier que les images sont bien re√ßues (si mises √† jour)
    if (req.files && req.files.length === 4) {
      parkingRequest.images = req.files.map((file) => file.path);
    }

    let parking;
    if (status === "accepted") {
      // ‚úÖ V√©rifier que toutes les donn√©es requises sont bien pr√©sentes
   

      if (parkingRequest.parkingId) {
        // ‚úÖ Mettre √† jour un parking existant
        parking = await Parking.findByIdAndUpdate(
          parkingRequest.parkingId,
          {
            name: parkingRequest.name,
            description: parkingRequest.description,
            position: parkingRequest.position,
            totalSpots: parkingRequest.totalSpots,
            availableSpots: parkingRequest.availableSpots,
            pricing: parkingRequest.pricing,
            vehicleTypes: parkingRequest.vehicleTypes,
            features: parkingRequest.features,
            images: parkingRequest.images,
            Owner: parkingRequest.Owner._id,
            status: "accepted",
          },
          { new: true }
        );
        if (!parking) return res.status(404).json({ message: "Parking introuvable pour mise √† jour" });
      } else {
        // ‚úÖ V√©rifier si un parking similaire existe
        const existingParking = await Parking.findOne({
          name: parkingRequest.name,
          position: parkingRequest.position,
          Owner: parkingRequest.Owner._id,
        });

        if (existingParking) {
          return res.status(400).json({ message: "Un parking avec ces informations existe d√©j√†" });
        }

        // ‚úÖ Cr√©ation d'un nouveau parking
        parking = new Parking({
          name: parkingRequest.name,
          description: parkingRequest.description,
          position: parkingRequest.position,
          totalSpots: parkingRequest.totalSpots,
          availableSpots: parkingRequest.availableSpots,
          pricing: parkingRequest.pricing,
          vehicleTypes: parkingRequest.vehicleTypes,
          features: parkingRequest.features,
          images: parkingRequest.images,
          Owner: parkingRequest.Owner._id,
          status: "accepted",
        });

        await parking.save();
      }
    }

    
    // ‚úÖ Suppression de la demande apr√®s mise √† jour du statut
    await ParkingRequest.findByIdAndDelete(requestId);

    res.status(200).json({ message: `Demande ${status} et supprim√©e`, parking });
        // ‚úÖ Envoi d'un email au propri√©taire

    const ownerEmail = parkingRequest.Owner?.email;
    const ownerName = parkingRequest.Owner?.name || 'Propri√©taire';
    if (ownerEmail) {
      try {
        const emailTemplate = getParkingRequestEmailTemplate(
          status,
          parkingRequest.name,
          ownerName
        );
        await sendEmail({
          email: ownerEmail,
          subject: emailTemplate.subject,
          message: emailTemplate.message,
        });
      } catch (emailError) {
        console.error("Erreur lors de l'envoi de l'email :", emailError);
      }
    }


  } catch (error) {
    console.error("Erreur lors de la mise √† jour de la demande :", error);
    res.status(500).json({ message: "Erreur lors de la mise √† jour", error: error.message });
  }

});

router.patch('/:id', saveParking3D);
router.patch('/:parkingId/spots/:spotId', getUserFromToken, updateParkingSpot);
router.get("/parkings/:id", async (req, res) => {
  try {
    const parkingId = req.params.id;
    
    // V√©rifie si l'ID est au format valide pour MongoDB
    if (!parkingId.match(/^[0-9a-fA-F]{24}$/)) {
      return res.status(400).json({ message: "ID de parking invalide" });
    }
    
    const parking = await Parking.findById(parkingId)
      .populate("Owner", "name email");
      
    if (!parking) {
      return res.status(404).json({ message: "Parking non trouv√©" });
    }
    
    console.log(`üöó Parking ${parkingId} r√©cup√©r√© avec succ√®s`);
    res.status(200).json(parking);
  } catch (error) {
    console.error(`‚ùå Erreur lors de la r√©cup√©ration du parking ${req.params.id}:`, error);
    res.status(500).json({ 
      message: "Erreur serveur lors de la r√©cup√©ration du parking", 
      error: error.message 
    });
  }
});

/**
 * ‚úÖ R√©cup√©rer toutes les demandes de parking
 */
router.get("/requests", async (req, res) => {
  try {
    const parkingRequests = await ParkingRequest.find()
      .populate("Owner", "name email")
      .populate("parkingId");
    res.status(200).json(parkingRequests);
  } catch (error) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des demandes de parking", error });
  }
});

/**
 * ‚úÖ Supprimer une requ√™te sp√©cifique
 */
async function deleteRequest(requestId) {
  try {
    await ParkingRequest.findByIdAndDelete(requestId);
    console.log(`Requ√™te ${requestId} supprim√©e avec succ√®s.`);
  } catch (error) {
    console.error(`Erreur lors de la suppression de la requ√™te ${requestId} :`, error);
  }
}

/**
 * ‚úÖ Soumettre une demande de parking
 */
router.post("/submit", verifyToken, upload, async (req, res) => {
  try {
    let { name, description, position, totalSpots, availableSpots, pricing, vehicleTypes, features } = req.body;

    console.log("üìå Requ√™te re√ßue :", req.body);

    // ‚úÖ Convertir les objets si envoy√©s en string
    if (typeof position === "string") position = JSON.parse(position);
    if (typeof pricing === "string") pricing = JSON.parse(pricing);
    if (typeof vehicleTypes === "string") vehicleTypes = JSON.parse(vehicleTypes);
    if (typeof features === "string") features = JSON.parse(features);

    // ‚úÖ V√©rifier que `position` contient `lat` et `lng`
    if (!position || typeof position.lat !== "number" || typeof position.lng !== "number") {
      return res.status(400).json({ message: "Position invalide. Format attendu: { lat: Number, lng: Number }" });
    }

    totalSpots = Number(totalSpots);
    availableSpots = Number(availableSpots);
    
    // ‚úÖ Mise √† jour du format de pricing selon le nouveau sch√©ma
    pricing = {
      hourly: Number(pricing.hourly || 0),
      daily: Number(pricing.daily || 0),
      weekly: Number(pricing.weekly || 0),
      monthly: Number(pricing.monthly || 0),
    };

    const images = req.files.map((file) => file.path);

    // ‚úÖ V√©rification des champs obligatoires
    if (!name || !totalSpots || !availableSpots || !pricing.hourly || !vehicleTypes || images.length === 0) {
      return res.status(400).json({ message: "Tous les champs obligatoires doivent √™tre remplis, y compris 4 images." });
    }

    // ‚úÖ V√©rification des types de v√©hicules
    const validVehicleTypes = ['Moto', 'Citadine', 'Berline / Petit SUV', 'Familiale / Grand SUV', 'Utilitaire'];
    const invalidTypes = vehicleTypes.filter(type => !validVehicleTypes.includes(type));
    if (invalidTypes.length > 0) {
      return res.status(400).json({ message: `Types de v√©hicules invalides: ${invalidTypes.join(', ')}` });
    }

    // ‚úÖ V√©rification des fonctionnalit√©s
    if (features) {
      const validFeatures = ["Indoor Parking", "Underground Parking", "Unlimited Entrances & Exits", "Extension Available"];
      const invalidFeatures = features.filter(feature => !validFeatures.includes(feature));
      if (invalidFeatures.length > 0) {
        return res.status(400).json({ message: `Fonctionnalit√©s invalides: ${invalidFeatures.join(', ')}` });
      }
    }

    const newParkingRequest = new ParkingRequest({
      action: "create",
      name,
      description,
      position,
      totalSpots,
      availableSpots,
      pricing,
      vehicleTypes,
      features: features || [],
      images,
      Owner: req.user.id,
    });

    await newParkingRequest.save();
    res.status(201).json({ message: "Demande enregistr√©e avec succ√®s", data: newParkingRequest });

  } catch (error) {
    console.error("‚ùå Erreur lors de la soumission :", error);
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
});
/**
 * ‚úÖ R√©cup√®re tous les parkings
 */
router.get("/parkings", async (req, res) => {
  try {
    const parkings = await Parking.find()
      .populate("Owner", "name email")
      .sort({ createdAt: -1 });
    
    // Ajouter les donn√©es m√©t√©o pour chaque parking
    const parkingsWithWeather = await Promise.all(
      parkings.map(async (parking) => {
        try {
          const weatherApiKey = "78af154a62027de4c1c77739d5ea593a";
          const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${parking.position.lat}&lon=${parking.position.lng}&appid=${weatherApiKey}&units=metric&lang=fr`;
          const weatherResponse = await axios.get(weatherUrl);
          
          return {
            ...parking.toObject(),
            weather: {
              temperature: Math.round(weatherResponse.data.main.temp),
              description: weatherResponse.data.weather[0].description,
              // Modification de l'URL de l'ic√¥ne pour utiliser HTTPS
              icon: `https://openweathermap.org/img/wn/${weatherResponse.data.weather[0].icon}@4x.png`,
              humidity: weatherResponse.data.main.humidity,
              windSpeed: weatherResponse.data.wind.speed
            }
          };
        } catch (weatherError) {
          console.error("Erreur m√©t√©o pour parking:", parking._id, weatherError);
          return parking;
        }
      })
    );

    res.status(200).json(parkingsWithWeather);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des parkings:", error);
    res.status(500).json({ 
      message: "Erreur serveur lors de la r√©cup√©ration des parkings", 
      error: error.message 
    });
  }
});

/**
 * ‚úÖ R√©cup√®re un parking par son ID
 */
router.get("/parkings/:id", async (req, res) => {
  try {
    const parkingId = req.params.id;
    
    const parking = await Parking.findById(parkingId)
      .populate("Owner", "name email");
      
    if (!parking) {
      return res.status(404).json({ message: "Parking non trouv√©" });
    }

    // Add weather information
    const weatherApiKey = "78af154a62027de4c1c77739d5ea593a";
    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${parking.position.lat}&lon=${parking.position.lng}&appid=${weatherApiKey}&units=metric&lang=fr`;
    
    const weatherResponse = await axios.get(weatherUrl);
    const weatherData = {
      temperature: Math.round(weatherResponse.data.main.temp),
      feelsLike: Math.round(weatherResponse.data.main.feels_like),
      humidity: weatherResponse.data.main.humidity,
      description: weatherResponse.data.weather[0].description,
      icon: `http://openweathermap.org/img/w/${weatherResponse.data.weather[0].icon}@4x.png`,
      windSpeed: weatherResponse.data.wind.speed
    };

    const parkingWithWeather = {
      ...parking.toObject(),
      weather: weatherData
    };
    
    res.status(200).json(parkingWithWeather);
  } catch (error) {
    console.error(`‚ùå Error:`, error);
    res.status(500).json({ 
      message: "Server error",
      error: error.message 
    });
  }
});
router.get("/check-pending/:parkingId", async (req, res) => {
  try {
    const { parkingId } = req.params;

    const existingRequest = await ParkingRequest.findOne({
      parkingId,
      status: "pending",
    });

    if (existingRequest) {
      return res.status(400).json({
        message: "Une demande de mise √† jour est d√©j√† en attente pour ce parking.",
      });
    }

    return res.status(200).json({ message: "Aucune requ√™te en attente." });
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification des requ√™tes :", error);
    return res.status(500).json({
      message: "Erreur serveur lors de la v√©rification des requ√™tes.",
    });
  }
});

/**
 * ‚úÖ Rechercher des parkings par localisation avec coordonn√©es `{ lat, lng }`
 */
router.post("/parkings/position", async (req, res) => {
  let { position } = req.body;

  if (!position || !position.lat || !position.lng) {
    return res.status(400).json({ message: "La localisation est requise avec lat et lng" });
  }

  try {
    console.log("üîç Recherche de parkings pour la localisation :", position);

    const parkings = await Parking.find({
      "position.lat": { $gte: position.lat - 0.05, $lte: position.lat + 0.05 },
      "position.lng": { $gte: position.lng - 0.05, $lte: position.lng + 0.05 },
    });

    if (parkings.length === 0) {
      return res.status(404).json({ message: "Aucun parking trouv√© pour cette localisation" });
    }

    res.status(200).json(parkings);
  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration des parkings", error: error.message });
  }
});
router.get("/my-parkings", verifyToken, async (req, res) => {
  try {
    const ownerId = req.user.id; 

    const parkings = await Parking.find({ Owner: ownerId })
      .populate("Owner", "name email") 
      .populate("id_employee", "name");

    if (parkings.length === 0) {
      return res.status(404).json({ message: "Aucun parking trouv√© pour cet utilisateur" });
    }

    res.status(200).json(parkings);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des parkings de l'Owner :", error);
    res.status(500).json({
      message: "Erreur serveur lors de la r√©cup√©ration des parkings",
      error: error.message,
    });
  }
});

router.put("/assign-employee/:parkingId/:employeeId", verifyToken, verifyRole("Owner"), async (req, res) => {
  try {
      const { parkingId, employeeId } = req.params;

      console.log(`üöÄ Assignation employ√© - Parking: ${parkingId}, Employ√©: ${employeeId}`);

      // V√©rifier si le parking existe
      const parking = await Parking.findById(parkingId);
      if (!parking) {
          console.log("‚ùå Parking non trouv√©");
          return res.status(404).json({ message: "Parking non trouv√©" });
      }
      console.log(`‚úÖ Parking trouv√©: ${parking.name}`);

      // V√©rifier si l'utilisateur connect√© est bien le propri√©taire du parking
      console.log(`üîç ID propri√©taire attendu: ${parking.Owner.toString()}, ID connect√©: ${req.user.id}`);
      if (parking.Owner.toString() !== req.user.id) {
          console.log("‚ùå Acc√®s interdit: l'utilisateur n'est pas le propri√©taire");
          return res.status(403).json({ message: "Acc√®s interdit : vous n'√™tes pas le propri√©taire de ce parking" });
      }
      console.log("‚úÖ Propri√©taire v√©rifi√©");

      // V√©rifier si l'employ√© existe et a le r√¥le "Employe"
      const employee = await User.findById(employeeId);
      if (!employee) {
          console.log("‚ùå Employ√© non trouv√©");
          return res.status(404).json({ message: "Employ√© non trouv√©" });
      }

      if (employee.role !== "Employe") {
          console.log("‚ùå L'utilisateur s√©lectionn√© n'est pas un employ√© valide");
          return res.status(400).json({ message: "L'utilisateur s√©lectionn√© n'est pas un employ√© valide" });
      }
      console.log(`‚úÖ Employ√© trouv√©: ${employee.name}`);

      // Assigner l'employ√© au parking
      parking.id_employee = employeeId;
      await parking.save();
      console.log(`‚úÖ Employ√© assign√©: ${employeeId} au parking: ${parkingId}`);

      res.status(200).json({ message: "Employ√© assign√© avec succ√®s", parking });

  } catch (error) {
      console.error("üí• Erreur serveur:", error);
      res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
});




/**
 * ‚úÖ Rechercher des parkings par nombre de places disponibles
 */
router.post("/parkings/availableSpots", async (req, res) => {
  let { availableSpots } = req.body;

  if (!availableSpots || isNaN(availableSpots)) {
    return res.status(400).json({ message: "Le nombre de places disponibles est requis et doit √™tre un nombre." });
  }

  availableSpots = parseInt(availableSpots);

  try {
    console.log("üîç Recherche de parkings avec au moins", availableSpots, "places disponibles");

    const parkings = await Parking.find({
      availableSpots: { $gte: availableSpots }, // Cherche les parkings avec un nombre de places >= √† la valeur donn√©e
    });

    if (parkings.length === 0) {
      return res.status(404).json({ message: "Aucun parking trouv√© avec ce nombre de places disponibles" });
    }

    res.status(200).json(parkings);
  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    res.status(500).json({ message: "Erreur serveur lors de la r√©cup√©ration des parkings", error: error.message });
  }
});

router.put("/parkings/:id", verifyToken, verifyRole("Owner", "Admin"), updateParking);
router.delete("/parkings/:id", verifyToken, verifyRole("Admin", "Owner"), deleteParking);
router.get("/parkings-by-employee/:employeeId", getParkingsByEmployee); // üîπ Nouvelle route
router.patch("/update-total-spots/:id", updateTotalSpots);

module.exports = router;